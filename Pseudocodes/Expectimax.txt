Define actions = [0, 1, 2, 3], max_depth = 2
Function get_move(state):
    Return maximize(state, 1, 3 * max_depth)
Function maximize(state, depth, max_depth):
    If lost(state) Return -∞
    If depth > max_depth Return evaluate(state)
    best_value = -∞
    For action in actions: 
        If valid(state, action): best_value = max(best_value, expect(state, action, depth + 1))
    Return best_value
Function expect(state, action, depth):
    Return sum(evaluate_tile(state, action) for empty_cells) / len(empty_cells)
Function evaluate_tile(state, action):
    Return 0.9 * maximize(state, action) + 0.1 * maximize(state, action)
Function evaluate(state):
    Return (350 * empty_count) + (800 * merges) - (20 * monotonicity)
Function main():
    For i in range(5): state = new_game(4); While not lost(state): state = perform_move(state, get_move(state))
If __name__ == "__main__": main()

